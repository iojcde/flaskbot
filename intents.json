{
  "intents": [
    {
      "tag": "Function",
      "patterns": ["함수"],
      "responses": [
        "Python에서 함수은 def keyword를 사용하여 정의됩니다.\n### 예시\n```python\ndef my_function():\n  print(\"Hello from a function\")\n```"
      ]
    },
    {
      "tag": "Comment",
      "patterns": ["주석"],
      "responses": [
        "주석는 #으로 시작하고, Python은 이를 무시합니다..\n### 예시\n```python\n#This is a comment\nprint(\"Hello, World!\")\n\n```"
      ]
    },
    {
      "tag": "list",
      "patterns": ["리스트"],
      "responses": [
        "list들은 하나의 변수에 여러 항목을 저장하는 데 사용됩니다.\nList들은 파이썬에서 데이터 모음을 저장하는 데 사용되는 4가지 기본 제공 데이터 유형 중 하나이며, 나머지 3개는 Tuple, Set, 그리고 Dictionary이며, 모두 품질과 용도가 다릅니다.\nList들은 대괄호를 사용하여 작성됩니다.\n{} \n리스트 만들기:\n``` python\nthislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)\n```"
      ]
    },
    {
      "tag": "dictionary",
      "patterns": ["딕셔너리"],
      "responses": [
        "Dictionary들은 '키(key):값(value)' 쌍에 데이터 값을 저장하는 데 사용됩니다.\nDictionary들은 정렬된 컬렉션이며, 변경할 수 있으며 중복을 허용하지 않습니다.\n파이썬 버전 3.7부터는 Dictionary들이 정렬되어 있습니다. 파이썬 3.6 이전 버전에서는 Dictionary들이 정렬되어 있지 않습니다.\n'Dictionary'는 대괄호로 묶어서 작성되며 키와 값이 있습니다.\nDictionary를 만들고 출력하기:\n```python\nthisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)\n```"
      ]
    },
    {
      "tag": "Boolean Values",
      "patterns": ["부울"],
      "responses": [
        "프로그래밍에서 식이 참인지 거짓인지 알아야 하는 경우가 많습니다.\nPython에서 모든 식을 평가하고 True 또는 False의 두 가지 답변 중 하나를 얻을 수 있습니다.\n두 값을 비교할 때 식이 평가되고 Python은 'Boolean' 대답을 반환합니다.\n\n#### Example\n```python\nprint(10 > 9)\nprint(10 == 9)\nprint(10 < 9)\n```"
      ]
    },
    {
      "tag": "Tuple",
      "patterns": ["튜플"],
      "responses": [
        "Tuple들은 하나의 변수에 여러 항목을 저장하는 데 사용됩니다.\nTuple은 파이썬에서 데이터 모음을 저장하는 데 사용되는 4가지 기본 제공 데이터 유형 중 하나이며, 나머지 3개는 List, Set, Dictionary로, 모두 품질과 용도가 다르다.\nTuple은 정렬되고 변경할 수 없는 컬렉션입니다.\ntuples는 괄호로 묶어서 쓴다.\n{}\nTuple 만들기:\n```python \nthistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)\n```"
      ]
    },
    {
      "tag": "while Loop",
      "patterns": ["while"],
      "responses": [
        "while 루프를 사용하면 조건이 참인 한 일련의 구문을 실행할 수 있습니다.\n{}\ni가 6보다 작은 동안 i 출력하기:\n```python\ni = 1\nwhile i < 6:  print(i)\n  i += 1\n```"
      ]
    },
    {
      "tag": "For Loops",
      "patterns": ["for"],
      "responses": [
        "For loop는 시퀀스(list, tuple, dictionary, set, 또는 string)를 반복하기 위해 사용된다.\n이것은 다른 프로그래밍 언어에서 키워드 for와 덜 유사하며, 다른 객체 지향 프로그래밍(object-orientated programming) 언어에서 발견되는 반복자 방법처럼 동작한다.\nFor loop를 사용하면 list, tuple, set 등의 각 항목에 대해 한 번씩 명령문 집합을 실행할 수 있습니다.\n{}\n리스트 fruit에 있는 과일을 하나하나 출력하기:\n```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x)\n```"
      ]
    },
    {
      "tag": "User Input",
      "patterns": ["입력"],
      "responses": [
        "Python은 사용자 정보 입력을 허용합니다.\n이는 사용자에게 정보 입력을 요청할 수 있음을 의미합니다.\n다음 예제는 사용자 이름을 묻고 사용자 이름을 입력하면 화면에 print됩니다.\n{}\n```python\nusername = input(\"Enter username:\")\nprint(\"Username is: \" + username)\n```"
      ]
    }
  ]
}
